
(library (lib vector-shorthand)
  (export v: v! v!-from vm v+ v- vs v_ vc vincr)
  (import (chezscheme))
  (begin
    (define vc (lambda (v) (vector-map (lambda (e) e) v)))
    (define v: vector-ref)
    (define v_ (lambda (v i th)
		 (v! v i (th (v: v i)))))
    (define vincr (lambda (v i val)
		    (vector-set! v i (+ val (vector-ref v i)))))
    (define v! (lambda (ve i v) (vector-set! ve i v) ve))
    (define v!-from (lambda (ve i . vs)
		      (cond ((eq? vs '())
			     ve)
			    (else
			     (vector-set! ve i (car vs))
			     (apply v!-from (cons ve (cons (+ i 1) (cdr vs))))))))
    (define vm vector-map)
    (define (v+ . rest)
      (apply vector-map (cons + rest)))
    (define (v- . rest)
      (apply vector-map (cons - rest)))
    (define (vs v s)
      (vector-map (lambda (x) (* x s)) v))))
